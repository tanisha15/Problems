Given an array of size N. Rotate the array from left to right (clockwise) K times.

E.g: N=5 -> 1 2 3 4 5     K=3
     K=1 -> 5 1 2 3 4
     K=2 -> 4 5 1 2 3
     K=3 -> 3 4 5 1 2


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

lengthy approach: 
Time complexity: O(kn)
Space complexity: O(1) because we are not creating any new array


import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int k=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }
      for(int i=1;i<=k;i++){
        leftrotatebyone(i,arr);
      }
      for(int i=0;i<n;i++){
        System.out.print(arr[i]+ " ");
     }
  }

  public static void leftrotatebyone(int k, int arr[]){
    int n=arr.length;
    int temp[]=new int[n];
    temp[0]=arr[n-1];
    for(int i=n-1;i>0;i--){  // this line is very important, if we run the loop from 1 to n then you see that when you 
    // are doing arr[i] = arr[i-1] then it means that arr[i] value is lost as it gets modified, therefore, when you run 
    // from n-1 to 0 instead, the value does not get lost
      arr[i]=arr[i-1];
    }
    arr[0]=temp[0];
  }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2nd approach:
Time complexity: O(n+n) = O(n)
Space complexity: O(n) because a temporary array has been used

Observe:

N=5, K=3           

Input:   1 2 3 4 5
Output:  3 4 5 1 2

digit  oldindex   newindex    how do we obtain the new index? 
1        0         3               0+3=3 % 5 = 3       oldindex+k=new index
2        1         4               1+3=4
3        2         0               2+3=5 % 5 = 0       oldindex+k % N= new index -> we can take this one 
4        3         1               3+3=6 % 5 = 1
5        4         2               4+3=7 % 5 = 2


import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    int k=sc.nextInt();
    int arr[]=new int[n];
    for(int i=0;i<n;i++){
      arr[i]=sc.nextInt();
    }

    int temp[]=new int[n];
    for(int i=0;i<n;i++){
      int j=(i+k)%n;
      temp[j]=arr[i];
    }

    for(int i=0;i<n;i++){
      arr[i]=temp[i];
      System.out.print(arr[i]+ " ");
    }
  }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3rd approach:
Time complexity: O(n)
Space complexity: O(1)

Input:       1 2   3 4 5
Output:      3 4 5   1 2

1st-> Reverse the entire array-> 5 4 3 2 1
2nd-> Reverse the first part of array-> 3 4 5 2 1
3rd-> Reverse the second part of array-> 3 4 5 1 2


1st-> reverse (a,0,n-1)
2nd-> reverse (a,0,k-1)
3rd-> reverse (a,k,n-1)

