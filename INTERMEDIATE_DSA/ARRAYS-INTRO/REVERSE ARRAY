Given an array arr of size N, reverse it without extra space.

mine code: this approach is wrong as the time complexity and space complexity is more.

import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      for(int i=n-1;i>=0;i--){
        System.out.print(arr[i]+" ");
      }

  }
}


Correct Approach:

Eg:

N=5
[1,2,3,4,5]  -> [5,4,3,2,1]

0th index->4th index  (swapping of values)
1st index->3rd index
2nd index->2nd index
3rd index->1st index
4th index->0th index


a[0] -> a[n-1]
a[1] -> a[n-2]
.
.
.
.
a[i] -> a[j]

How to find j?

You see that 0+n-1=n-1, 1+n-2=n-1 and so on
Therefore, i+j=n-1; j=n-1-i

Therefore, a[i] -> a[n-1-i]

Dry Run Code:

for(i=0;i<n;i++){
  swap(a[i],a[n-1-i]);
  }

But this above code will not work. Why?

e.g. arr=[1,2,3,4]

 i     a[i]            a[n-1-i]        output
 0       1                4             4 2 3 1
 1       2                3             4 3 2 1
-----------------------------------------------------------
 2       3                2             4 2 3 1
 4       4                1             1 2 3 4

So you can see in the above dry run, we need to run the loop by half- n/2 to get the correct output

2 ways to write the code:

i=0; j=n-1                                      or                   for(i=0;i<n/2;i++)
while (i<j){                                                             swap (a[i], a[n-1-i])
  swap (a[i],a[j]);
  i++;
  j--;
  }



  Time complexity: O(n/2) = O(n)
  Space complexity: O(1)


Approach 1:

import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      for(int i=0;i<n/2;i++){
         swap(i, n-1-i, arr);
      }

      for(int i=0;i<n;i++){
        System.out.print(arr[i]+ " ");
      }
  }

  public static void swap(int a, int b, int arr[]){
    int c=arr[a];
    arr[a]=arr[b];
    arr[b]=c;
  }
}

Approach 2:

import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int low=0;
      int high=n-1;
      while (low<high){
        int temp=arr[low];
        arr[low]=arr[high];
        arr[high]=temp;
        low++;
        high--;
      }
      for(int i=0;i<n;i++){
        System.out.print(arr[i]+ " ");
      }
  }
}


