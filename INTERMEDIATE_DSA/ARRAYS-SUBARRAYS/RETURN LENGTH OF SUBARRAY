Given an array, return length of smallest subarray which contains both maximum and minimum element of array.

a = 1 2 6 5 4 9 5 8 1 2
              -------

min=1
max=9

ans = 4

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Optimized approach:

Time complexity: O(n^2)
Space complexity: O(1)

-> First find the max and min elements.
-> Then find the max and min boolean values in the subarray and return the lenth containing the max and min values from the array
-> length of subarray = j-i+1

import java.util.*;

public class Main {
  public static void main(String[] args) {
     Scanner sc=new Scanner(System.in);
     int n=sc.nextInt();
     int arr[]=new int[n];
     for(int i=0;i<n;i++){
      arr[i]=sc.nextInt();
     }

     int min=arr[0];
     for(int i=0;i<n;i++){
      if(arr[i]<min){
        min=arr[i];
      }
     }

     int max=arr[0];
     for(int i=0;i<n;i++){
      if(arr[i]>max){
        max=arr[i];
      }
     }

      int ans=n;
      for(int i=0;i<n;i++){
        boolean maxi=false;
        boolean mini=false;
        for(int j=i;j<n;j++){
          if (arr[j]==min){
            mini=true;
          }
          if(arr[j]==max){
            maxi=true;
          }
          if(maxi && mini){
          if(ans>j-i+1){
            ans=j-i+1;
            break;
          }
          }
        }
     }
  System.out.print(ans);
  }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

More optimized approach:

Observations:

In my final answer:

1. Only 1 min and 1 max will be present.
2. min and max values always lies at the corners.

So you can try to find the max which is closest to the min.

min.....max or max.....min

-> For each min value find the closest max and vice versa. Carry forward will help in that.









