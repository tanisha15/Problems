Given an array of integers, find total sum of all possible subarrays.

E.g - a[]= [6,8,-1,7]

subarrays sum--->

[0,0] ->  6
[0,1] -> 14
[0,2] -> 13
[0,3] -> 20
[1] -> 8
[1,2] -> 7
[1,3] -> 14
[2] -> -1
[2,3] -> 6
[3] -> 7

Output-> 94 (adding the sum of all the subarrays)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Mine code:

Using Prefix sum:

Time complexity: O(n^2)
Space complexity: O(1)

import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int pf[]=new int[n];
      int psum=0;
      for(int i=0;i<n;i++){
          psum=psum+arr[i];
          pf[i]=psum;
      }

      int sum=0;
      for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            if(i==0){
              sum=sum+pf[j];
            }
            else{
              sum=sum+(pf[j]-pf[i-1]);
            }
        }
      }
      System.out.print(sum);
  }
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Carry Forward

Time complexity: O(n^2)
Space complexity: O(1)

import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int total_sum=0;
      int sum=0;
      for(int i=0;i<n;i++){
          sum=0;
        for(int j=i;j<n;j++){
            sum=sum+arr[j];
            total_sum=sum+total_sum;
        }
      }
      System.out.print(total_sum);
  }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Optimized Appraoch:

Contribution technique (check the notebook to understand the formula being used)

We are calculating the in how many subarrays the element at index i will be present

The answer is (i+1) * (n-i)

If we find the number of subarrays where each element comes, it means the element is present that many times.

So we simply multiply:

element * no of subarrays and store this in sum

Time complexity: O(n)
Space complexity: O(1)

import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int sum=0;
      for(int i=0;i<n;i++){
        sum=sum+ (arr[i] * (i+1) * (n-i));
      }
      System.out.print(sum);
      
  }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



