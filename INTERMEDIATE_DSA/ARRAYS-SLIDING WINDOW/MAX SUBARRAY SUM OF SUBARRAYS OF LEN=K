Given an array of size N, print max sub array sum of subarrays of len=k.

Input:
8
3
5 6 7 8 9 1 2 4

Output:
18
21
24
18
12
7

To print the sum of all subarrays with len k=3

import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc= new Scanner(System.in);
      int n=sc.nextInt();
      int k=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int sum=0;
      int max_sum=0;

      for(int i=0;i<n-k+1;i++){
        int j=i+k-1;
        sum=0;
        for(int p=i;p<=j;p++){
          sum=sum+arr[p];
        }
        System.out.println(sum);
        //max_sum=Math.max(sum,max_sum);
      }
      //System.out.print(max_sum);
  }
}

To print max_sum from the above sums

Input: same as above
Output: 24

Time complexity: O(n^2)
Space complexity : O(1)


import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc= new Scanner(System.in);
      int n=sc.nextInt();
      int k=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int sum=0;
      int max_sum=0;

      for(int i=0;i<n-k+1;i++){
        int j=i+k-1;
        sum=0;
        for(int p=i;p<=j;p++){
          sum=sum+arr[p];
        }
        max_sum=Math.max(sum,max_sum);
      }
      System.out.print(max_sum);
  }
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Using Prefix array:

Time complexity: O(n)
Space complexity: O(n)

// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc= new Scanner(System.in);
      int n=sc.nextInt();
      int k=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int pf[]=new int[n];
      int psum=0;
      for(int i=0;i<n;i++){
        psum=psum+arr[i];
        pf[i]=psum;
      }

      int sum=0;
      int max_sum=0;

      for(int i=0;i<n-k+1;i++){
        int j=i+k-1;
        sum=0;
        if(i==0){
          sum=pf[j];
        }
        else{
          sum=pf[j]-pf[i-1];
        }
        max_sum=Math.max(sum,max_sum);
      }
      System.out.print(max_sum);
  }
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Carry Forward aka Sliding window

E.g:

k=5

index =  0 1  2 3 4  5  6 7  8 9
a[10] = -3 4 -2 5 3  -2 8 2 -1 4

sum1 = [0,4] = -3+4+(-2)+5+3= 7
sum2= = [1,5] = 7-(-3)+(-2) = 8
sum3 = 8-4+8 =12


so we are sliding the window and updating our sum

// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
import java.lang.*;

public class Main {
  public static void main(String[] args) {
      Scanner sc= new Scanner(System.in);
      int n=sc.nextInt();
      int k=sc.nextInt();
      int arr[]=new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int pf[]=new int[n];
      int psum=0;
      for(int i=0;i<n;i++){
        psum=psum+arr[i];
        pf[i]=psum;
      }


      int sum=0;
      for(int i=0;i<k;i++){
        sum=sum+arr[i];
      }

      int max_sum=sum;
      int j=k;  
      int i=1;
      while(j<n){
        sum=sum-arr[i-1]+arr[j];
        max_sum=Math.max(sum,max_sum);
        i++;
        j++;
      }    
      System.out.println(max_sum);
  }
}











