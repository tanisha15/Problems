Given an array of size N, count number of special index in the array.

Note: Special index is after removing it, sum of even indexed elements= sum of odd indexed elements.

For e.g:

      0 1 2 3 4 5
a[6]= 4 3 2 7 6 -2

-> delete the 0th index

0 1 2 3 4
3 2 7 6 -2

sum of odd indexes= 2+6=8
sum of even indexes= 3+7-2=8

Therefore, 0th index is a special index

-> delete the 1st index

0 1 2 3 4
4 2 7 6 -2

sum of odd indexes= 2+6=8
sum of even indexes=4+7-2=9

So 1 is not special index

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Optimized Approach:

Suppose we want to check if i is special index-

-> Indices on left side of i will remain intact while indices on right side will change from odd-> even or from even->odd

For e.g:

   0 1 2 3 4 5 6
A= 2 3 4 5 6 7 8

On removing 3rd index element,

   0 1 2 3 4 5
A= 2 3 4 6 7 8

Sum of odd indexed elements after removing index 3 = Sum of odd indexed elements from 0 to 2 + Sum of even indexed elements from 4 to 6

So to answer the above question, do you actually have to create a new array with after removing the index? No

You can check the same by performing the above operation on the original array itself

Similarly, 

Sum of even indexed elements after removing index 3 = Sum of even indexed elements from 0 to 2 + Sum of odd indexed elements from 4 to 6

Steps:

-> Create Pfe ( prefix array of sum of even indexed elements ) and Pfo ( prefix array of sum of odd indexed elements )
-> For checking index i,
Sodd = Sodd [0,i-1] + Seven [i+1,n-1]
     = Pfo(i-1) + (Pfe[n-1] - Pfe[i])
Similar for Seven

Method:

int specialcount(a[]){
Pfo, Pfe  -------------------------------------> O(N)
c=0;
for(int i=0;i<n;i++){
if (i==0){
    Sodd= 0 + Pfe[n-1] -----------------> Pfe(n-1) as Pfe[1,n-1]------> take l=1 and r=n-1, to calculate we do pfe[r]-pfe[l-1]
    Seven= 0 + Pfo[n-1]
}
else{
   Sodd = Sodd [0,i-1] + Seven [i+1,n-1]          
     = Pfo[i-1] + (Pfe[n-1] - Pfe[i])  -------> taking the range--->  to calculate we do pfe[r]-pfe[l-1] and here r=n-1 and l=i+1
   Seven=
}
if (Sodd=Seven){
   c++;
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Time complexity: O(N)
Space complexity: O(N)

Code:

import java.util.*;
public class Main {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int arr[] = new int[n];
      for(int i=0;i<n;i++){
        arr[i]=sc.nextInt();
      }

      int pe[]=new int[n];
      int po[]=new int[n];

      //Pfe
      int seven=0;
      for(int i=0;i<n;i++){
          if(i%2==0){
            seven=seven+arr[i];
            pe[i]=seven;
          }
          else{
            pe[i]=seven;
          }
      }

      // //for(int i=0;i<n;i++){
      //   System.out.print(pe[i]+ " ");
      // }
      // System.out.println();

      //Pfo
      int sodd=0;
      for(int i=0;i<n;i++){
          if(i%2!=0){
            sodd=sodd+arr[i];
            po[i]=sodd;
          }
          else{
            po[i]=sodd;
          }
      }

        //  //for(int i=0;i<n;i++){
        //   System.out.print(po[i]+ " ");
        //  }
        // System.out.println();

      
      int scount=0;
      int oddsum=0;
      int evensum=0;

      for(int i=0;i<n;i++){
        if(i==0){
          oddsum=pe[n-1];
          evensum=po[n-1];
        }
        else{
          oddsum=po[i-1]+ (pe[n-1] - pe[i]);
          evensum=pe[i-1]+ (po[n-1] - po[i]);
        }

        if(oddsum==evensum){
              scount++;
            } 
      }
      System.out.println(scount);
  }
}












