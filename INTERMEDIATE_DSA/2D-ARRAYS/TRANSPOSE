Given mat[n][n], calculate transpose of the matrix without extra space.

Transpose->
0th row -> 0th col
1st row -> 1st col
2nd row -> 2nd col
.
.
.
nth row -> nth col

For e.g:

2 3 4 5                    2  3  5  9                  
3 4 5 6    ------------->  3  4  6  2
5 6 7 8                    4  5  7  1
9 2 1 3                    5  6  8  3


If you observe the diagonals remain the same in original matrix and the transpose matrix
and arr[i][j] -> arr[j][i]
and arr[i][i] -> arr[i][i]


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Time complexity: O(n^2)
Space complexity: O(1)

// Online Java Compiler
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int arr[][] = new int[n][m];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = sc.nextInt();
            }
        }

        // Transpose the matrix in-place
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }

        // Displaying the transposed matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }
}


But you get back the same matrix as the original one. Why? because if you see in the above code, there is double swapping happening, we only need to traverse
half of the matrix and not the entire one.

This can be prevented if we make i<j;

So, start j=i+1, then i will always be less than j

// Online Java Compiler
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int arr[][] = new int[n][m];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = sc.nextInt();
            }
        }

        // Transpose the matrix in-place
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < m; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }

        // Displaying the transposed matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }
}
